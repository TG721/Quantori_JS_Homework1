/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ (() => {

eval("const headerTop = new Header({text:\"To Do List\", importance:\"h1\"});\r\nconst search = new Input({\r\n        placeholder:\"Search Task\", \r\n        width: \"60%\",     \r\n    })\r\nsearch.element.addEventListener(\"input\", function(event) {\r\n    const inputText = search.element.value;\r\n    for (let i = 0; i < allTasks.element.children.length; i++){\r\n      const currentTask = allTasks.element.children[i];\r\n      const taskTitle = currentTask.firstChild.children[1].innerText;\r\n      console.log(\"input text: \", inputText, \" taskTitle: \", taskTitle)\r\n      if((taskTitle.toLowerCase()).includes((inputText).toLowerCase())) currentTask.style.display = \"block\"\r\n      else currentTask.style.display = \"none\"\r\n    }\r\n\r\n  });\r\nconst newTaskButton = new Button({text:\"+ New Task\", color:\"#0053CF\", bgColor:\"#3C86F426\", width:\"15%\", class:\"button\",   onClick: function() {\r\n    addTaskButton.setState({bgColor: \"#D3D3D3\"}); //make button color grey \r\n    modalInput.setState({isEmpty: true});         //empty input field \r\n    modal.setState({display: \"block\"});           //show modal\r\n    overlay.setState({display: \"block\"});         //show overlay\r\n  }}); \r\nconst allTasksHeader = new Header({text:\"All tasks\", importance:\"h3\"});\r\nconst allTasks = new List({children: []})\r\nconst completedTasksHeader = new Header({text:\"Completed tasks\", importance:\"h3\"});\r\nconst completedTasks = new List({children: []});\r\n\r\n//make a request\r\nconst request = new XMLHttpRequest();\r\nlet responseArray = [];\r\nlet listSize = 0;\r\n//getting Tasks\r\nrequest.open(\"GET\",\"http://localhost:3000/tasks\");\r\nrequest.send()\r\nrequest.onload = ()=>{\r\n    // console.log(request);\r\n    if(request.status===200){\r\n        responseArray = JSON.parse(request.response)\r\n        listSize = responseArray.length;\r\n        let allTasksArray = [];\r\n        let completedTasksArray = [];\r\n        for(let i =0; i<responseArray.length; i++){\r\n          if(responseArray[i].isCompleted==false)  {\r\n            const task = createTask({text: responseArray[i].title, id: responseArray[i].id, isCompleted: false });\r\n            allTasksArray.push(task)\r\n          }\r\n          else {\r\n            const task = createTask({text: responseArray[i].title, id: responseArray[i].id, isCompleted: true });\r\n            completedTasksArray.push(task)\r\n          }\r\n        }\r\n        allTasks.setState({children: allTasksArray});\r\n        completedTasks.setState({children: completedTasksArray});\r\n    }\r\n    else {\r\n        console.log(`error ${request.status}`);\r\n\r\n    }\r\n\r\n}\r\n\r\nconst modalHeader = new Header({text:\"Add New Task\", importance:\"h3\", style:\"text-align: center\"});\r\nconst modalInput = new Input({placeholder:\"Task Title\", width: \"90%\", marginLeft: \"20px\"});\r\nconst cancelButton = new Button({text:\"Cancel\", color:\"#0053CF\", bgColor:\"white\", width:\"30%\", class:\"button\", onClick: function() {\r\n    modal.setState({display: \"none\"});\r\n    overlay.element.style.display = \"none\"\r\n  }}); \r\nconst addTaskButton = new Button({text:\"Add Task\", color:\"white\", bgColor:\"#D3D3D3\", width:\"30%\", class:\"button\", onClick: function() {\r\n    modal.setState({display: \"block\"});\r\n    overlay.setState({display: \"block\"});\r\n    const inputResult = modalInput.element.value;\r\n    if(inputResult != null && inputResult.trim(' ')!=\"\"){\r\n    const text = inputResult;\r\n    const newTask = createTask({text: text, id: listSize+1});\r\n    allTasks.setState({children: [...allTasks.props.children, newTask]});\r\n    const taskData = {id : null, title : text, isCompleted : false}\r\n    // console.log(taskData);\r\n    //add on local server\r\n      fetch('http://localhost:3000/tasks',{\r\n        method : \"POST\",\r\n        headers : {\r\n          'Content-Type' : 'application/json',\r\n        },\r\n        body : JSON.stringify(taskData),\r\n      })\r\n      .then(response => response.json())\r\n      .then(() =>\r\n      {console.log(\"success\");\r\n      modal.setState({display: \"none\"})\r\n      overlay.setState({display: \"none\"});\r\n      listSize++;\r\n    })\r\n    .catch(error => console.log(error))\r\n    }\r\n  }}); \r\nconst buttonsWrapper = new Component({children: [cancelButton.render(), addTaskButton.render()], style:\"text-align: center; margin: 150px 0px 0px -40px\"});\r\nmodalInput.element.addEventListener(\"input\", function(event) {\r\n    if(modalInput.element.value.trim(' ') != \"\") addTaskButton.setState({bgColor: \"#3C86F4\"})\r\n    else addTaskButton.setState({bgColor: \"#D3D3D3\"});\r\n});\r\n\r\nconst overlay = new Overlay();\r\nconst modal = new Modal({children: [modalHeader.render(), modalInput.render(), buttonsWrapper.render()]});\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n}\r\nvar a = new createTask({text: \"Task 1 title\"});\r\n// console.log(header1.render()) //was only for debugging purposes\r\ndocument.getElementById('root').appendChild(new App({children: [\r\n    headerTop.render(),\r\n    search.render(),\r\n    newTaskButton.render(),\r\n    allTasksHeader.render(),\r\n    allTasks.render(),\r\n    completedTasksHeader.render(),\r\n    completedTasks.render(),\r\n    overlay.render(),\r\n    modal.render()\r\n\r\n    \r\n]}).render());\r\n\r\n\r\nfunction createTask(props) { //{text}\r\nconst labelVar = document.createElement('label');\r\nconst inputVar = document.createElement('input');\r\ninputVar.type = \"checkbox\";\r\nif(props.isCompleted) {\r\n  inputVar.checked = true;\r\n  inputVar.disabled = true;\r\n}\r\nelse {\r\n  inputVar.checked = false;\r\n}\r\ninputVar.addEventListener(\"change\", function(event) {\r\n    if (this.checked) {\r\n        //modify element in json server\r\n        const taskData = {id : props.id, title : props.text, isCompleted : true}\r\n        fetch('http://localhost:3000/tasks/' + props.id, {\r\n        method: 'PATCH', \r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(taskData),\r\n        })\r\n      .then(response => response.json())\r\n      .then(() => {\r\n        console.log(\"data was successfuly modified\");\r\n        console.log(\"Checkbox is checked\");\r\n        const parentElement = imgVar.parentElement;\r\n        parentElement.firstChild.firstChild.disabled = true;\r\n        const index = Array.from(parentElement.parentElement.children).indexOf(imgVar);\r\n        completedTasks.setState({children: [parentElement]});\r\n        allTasks.removeItemAt(index);\r\n      })\r\n      .catch(error => console.error(error))\r\n      }\r\n  });\r\nconst spanVar = document.createElement('span');\r\nspanVar.innerText = props.text;\r\nconst imgVar = document.createElement('img');\r\nimgVar.addEventListener(\"click\", function(event) {\r\n    const parentElement = imgVar.parentElement;\r\n    const index = Array.from(parentElement.parentElement.children).indexOf(imgVar);\r\n    fetch('http://localhost:3000/tasks/' + parentElement.id, {\r\n    method: 'DELETE',\r\n    })\r\n    .then(response => response.json())\r\n    .then(() => {\r\n      allTasks.removeItemAt(index);\r\n      parentElement.remove();\r\n    })\r\n    .catch(error => console.error(error))\r\n  });\r\nimgVar.src = \"images/trash.svg\";\r\nimgVar.className = \"imgButton\";\r\nimgVar.style.marginLeft = \"100px\";\r\nlabelVar.style.display = \"inline-block\";\r\nimgVar.style.display = \"inline-block\";\r\nlabelVar.style.width = \"400px\";\r\nlabelVar.appendChild(inputVar);\r\nlabelVar.appendChild(spanVar);\r\n\r\nreturn new Task({children: [labelVar,imgVar], id: props.id}).render();\r\n}\r\n\n\n//# sourceURL=webpack://typescript/./src/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app.js"]();
/******/ 	
/******/ })()
;